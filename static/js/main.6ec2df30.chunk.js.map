{"version":3,"sources":["config/index.js","config/conifigureApp.js","components/ListHeading.js","components/ListRow.js","components/Overview.js","App.js","serviceWorker.js","index.js"],"names":["configureApp","descriptionMeta","document","getElementsByTagName","namedItem","content","config","title","manifest","stringManifest","JSON","stringify","blob","Blob","type","manifestURL","URL","createObjectURL","querySelector","setAttribute","ListHeading","headingItems","className","map","item","key","style","width","length","ListRow","row","keys","items","useMemo","k","PUBLIC_SHEET_URL","Overview","useState","isLoading","setIsLoading","sheetData","setSheetData","initTableTop","useCallback","Tabletop","init","simpleSheet","callback","data","useEffect","timer","setInterval","clearInterval","Object","rows","i","href","target","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ec2df30.chunk.js","sourcesContent":["export default {\n  appName: 'Testing Planner',\n  sheetKey: '1R4itWYDGmuc2cPAT2nxIVLsCvQsqu6nPZlZ2A3XZVrc'\n}\n","import config from './'\n\nconst configureApp = () => {\n  // replace app name in document dynamically from config\n  const metas = document.getElementsByTagName('meta')\n  const descriptionMeta = metas.namedItem('description')\n  if (descriptionMeta) {\n    descriptionMeta.content = config.appName\n  }\n  document.title = config.appName\n\n\n  // create manifest for webapp\n  const manifest = {\n    \"short_name\": config.appName,\n    \"name\": config.appName,\n    \"icons\": [\n      {\n        \"src\": \"favicon.ico\",\n        \"sizes\": \"64x64 32x32 24x24 16x16\",\n        \"type\": \"image/x-icon\"\n      },\n      {\n        \"src\": \"logo192.png\",\n        \"type\": \"image/png\",\n        \"sizes\": \"192x192\"\n      },\n      {\n        \"src\": \"logo512.png\",\n        \"type\": \"image/png\",\n        \"sizes\": \"512x512\"\n      }\n    ],\n    \"start_url\": \".\",\n    \"display\": \"standalone\",\n    \"theme_color\": \"#000000\",\n    \"background_color\": \"#ffffff\"\n  }\n\n  const stringManifest = JSON.stringify(manifest)\n  const blob = new Blob([stringManifest], { type: 'application/json' })\n  const manifestURL = URL.createObjectURL(blob)\n  document.querySelector('#manifest-placeholder').setAttribute('href', manifestURL)\n}\n\nexport default configureApp\n","import React from 'react'\n\nconst ListHeading = ({ headingItems }) => {\n  return (\n    <li className=\"heading\">\n      {headingItems.map(item => (\n        <div key={item} className=\"heading-item\" style={{ width: `${100 / headingItems.length}%` }}>\n          { item || '-' }\n        </div>\n      ))}\n    </li>\n  )\n}\n\nexport default ListHeading\n","import React, { useMemo } from 'react'\n\nconst ListRow = ({ row, keys }) => {\n  const items = useMemo(() => {\n    return keys.map(k => row[k])\n  }, [row, keys])\n\n  return (\n    <li className=\"row\">\n      {items.map(item => (\n        <div key={item} className=\"heading-item\" style={{ width: `${100 / items.length}%` }}>\n          { item || '-' }\n        </div>\n      ))}\n    </li>\n  )\n}\n\nexport default ListRow\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport Tabletop from 'tabletop'\n\nimport config from '../config'\n\nimport ListHeading from './ListHeading'\nimport ListRow from './ListRow'\n\nimport './Overview.css'\n\nconst PUBLIC_SHEET_URL = `https://docs.google.com/spreadsheets/d/${config.sheetKey}/pubhtml`\n\nconst Overview = () => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [sheetData, setSheetData] = useState()\n\n  const initTableTop = useCallback(() => {\n    Tabletop.init({\n      key: PUBLIC_SHEET_URL,\n      simpleSheet: true,\n      callback: data => {\n        setSheetData(data)\n        setIsLoading(false)\n      }\n    })\n  }, [])\n\n  useEffect(() => {\n    setIsLoading(true)\n    initTableTop()\n\n    const timer = setInterval(initTableTop, 60000)\n\n    return () => { clearInterval(timer) }\n  }, [initTableTop])\n\n  const headingItems = useMemo(() => {\n    return (sheetData && sheetData[0] && Object.keys(sheetData[0])) || []\n  }, [sheetData])\n\n  const rows = useMemo(() => {\n    if (!sheetData) {\n      return (\n        <div className=\"no-data\">\n          <p>\n            No data loaded! Edit the sheet <a href={`https://docs.google.com/spreadsheets/d/${config.sheetKey}/edit#gid=0`} target=\"_blank\" rel=\"noopener noreferrer\">here</a>\n          </p>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"weekly-overview\">\n        <ul className=\"list\">\n          <ListHeading headingItems={headingItems} />\n          {sheetData.map((row, i) => (\n            <ListRow row={row} keys={headingItems} />\n          ))}\n        </ul>\n      </div>\n    )\n  }, [sheetData, headingItems])\n\n  return (\n    <div className=\"Overview\">\n      <h1>{config.appName}</h1>\n      { isLoading ? <p>Loading...</p> : rows }\n    </div>\n  )\n}\n\nexport default Overview\n","import React from 'react'\nimport './App.css'\n\nimport configureApp from './config/conifigureApp'\n\nimport Overview from './components/Overview'\n\nconfigureApp()\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Overview />\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}