{"version":3,"sources":["components/Overview.js","App.js","serviceWorker.js","index.js"],"names":["SHEET_KEY","PUBLIC_SHEET_URL","Overview","useState","isLoading","setIsLoading","sheetData","setSheetData","tableTopInstance","setTableTopInstance","useEffect","tt","Tabletop","init","key","simpleSheet","callback","data","timer","setInterval","fetch","then","clearInterval","rows","useMemo","className","map","gRow","i","day","food","evening","href","target","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4SAKMA,G,MAAY,gDACZC,EAAgB,iDAA6CD,EAA7C,YAyEPE,EAvEE,WAAO,IAAD,EACaC,oBAAS,GADtB,mBACdC,EADc,KACHC,EADG,OAEaF,qBAFb,mBAEdG,EAFc,KAEHC,EAFG,OAG2BJ,qBAH3B,mBAGdK,EAHc,KAGIC,EAHJ,KAKrBC,qBAAU,WACR,IAAKF,EAAkB,CACrBH,GAAa,GACb,IAAMM,EAAKC,IAASC,KAAK,CACvBC,IAAKb,EACLc,aAAa,EACbC,SAAU,SAAAC,GACRV,EAAaU,GACbZ,GAAa,MAGjBI,EAAoBE,MAErB,IAEHD,qBAAU,WACR,IAAMQ,EAAQC,aAAY,WACpBX,GACFA,EACGY,QACAC,MAAK,SAAAJ,GAAI,OAAIV,EAAaU,QAE9B,KAEH,OAAO,WAAQK,cAAcJ,MAC5B,IAEH,IAAMK,EAAOC,mBAAQ,WACnB,OAAKlB,EAWH,yBAAKmB,UAAU,mBACb,wBAAIA,UAAU,QACZ,wBAAIA,UAAU,YACZ,yBAAKA,UAAU,OAAf,OACA,yBAAKA,UAAU,QAAf,QACA,yBAAKA,UAAU,WAAf,YAEDnB,EAAUoB,KAAI,SAACC,EAAMC,GAAP,OACb,wBAAIH,UAAU,MAAMX,IAAG,cAASc,IAC9B,yBAAKH,UAAU,OAAOE,EAAKE,KAC3B,yBAAKJ,UAAU,QAAQE,EAAKG,MAAQ,KACpC,yBAAKL,UAAU,WAAWE,EAAKI,SAAW,WApBhD,yBAAKN,UAAU,WACb,6DACiC,uBAAGO,KAAI,iDAA4ChC,EAA5C,eAAoEiC,OAAO,SAASC,IAAI,uBAA/F,YAwBtC,CAAC5B,IAEJ,OACE,yBAAKmB,UAAU,YACb,8CACErB,EAAY,yCAAoBmB,IC7DzBY,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCIcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.62032a65.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport Tabletop from 'tabletop'\n\nimport './Overview.css'\n\nconst SHEET_KEY = '1R4itWYDGmuc2cPAT2nxIVLsCvQsqu6nPZlZ2A3XZVrc'\nconst PUBLIC_SHEET_URL = `https://docs.google.com/spreadsheets/d/${SHEET_KEY}/pubhtml`\n\nconst Overview = () => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [sheetData, setSheetData] = useState()\n  const [tableTopInstance, setTableTopInstance] = useState()\n\n  useEffect(() => {\n    if (!tableTopInstance) {\n      setIsLoading(true)\n      const tt = Tabletop.init({\n        key: PUBLIC_SHEET_URL,\n        simpleSheet: true,\n        callback: data => {\n          setSheetData(data)\n          setIsLoading(false)\n        },\n      })\n      setTableTopInstance(tt)\n    }\n  }, [])\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (tableTopInstance) {\n        tableTopInstance\n          .fetch()\n          .then(data => setSheetData(data))\n      }\n    }, 200000)\n\n    return () => { clearInterval(timer) }\n  }, [])\n\n  const rows = useMemo(() => {\n    if (!sheetData) {\n      return (\n        <div className=\"no-data\">\n          <p>\n            No data loaded! Edit the sheet <a href={`https://docs.google.com/spreadsheets/d/${SHEET_KEY}/edit#gid=0`} target=\"_blank\" rel=\"noopener noreferrer\">here</a>\n          </p>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"weekly-overview\">\n        <ul className=\"list\">\n          <li className=\"headings\">\n            <div className=\"day\">Day</div>\n            <div className=\"food\">Food</div>\n            <div className=\"evening\">Evening</div>\n          </li>\n          {sheetData.map((gRow, i) => (\n            <li className=\"row\" key={`row-${i}`}>\n              <div className=\"day\">{gRow.day}</div>\n              <div className=\"food\">{gRow.food || '-'}</div>\n              <div className=\"evening\">{gRow.evening || '-'}</div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  }, [sheetData])\n\n  return (\n    <div className=\"Overview\">\n      <h1>Weekly Planner</h1>\n      { isLoading ? <p>Loading...</p> : rows }\n    </div>\n  )\n}\n\nexport default Overview\n","import React from 'react'\nimport './App.css'\n\nimport Overview from './components/Overview'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Overview />\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}